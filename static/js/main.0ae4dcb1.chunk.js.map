{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/Spinner/Spinner.js","App.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","contactsActions","_","payload","state","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactReducer","devTools","process","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","delete","getFilter","getAllContacts","getLoading","getVisibleContacts","createSelector","filterValue","normalizedFilter","toLowerCase","includes","ContactForm","handleSubmit","e","preventDefault","contactName","props","map","push","alert","onSubmit","resetInput","handleChange","currentTarget","value","setState","this","className","type","pattern","title","required","onChange","Component","connect","contactsSelectors","contactOperations","contactsAction","deleteContact","onClick","Spinner","color","height","width","App","fetchContact","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ae4dcb1.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nconst fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactSuccess]: (_, { payload }) => payload,\r\n  [contactsActions.addContactSuccess]: (state, { payload }) => [\r\n    ...state,\r\n    payload,\r\n  ],\r\n  [contactsActions.deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.fetchContactRequest]: () => true,\r\n  [contactsActions.fetchContactSuccess]: () => false,\r\n  [contactsActions.fetchContactError]: () => false,\r\n\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n\r\n  [contactsActions.deleteContactRequest]: () => true,\r\n  [contactsActions.deleteContactSuccess]: () => false,\r\n  [contactsActions.deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n/* import storage from 'redux-persist/lib/storage'; */\r\nimport contactReducer from './contacts/contacts-reducer';\r\n\r\n/* const contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}; */\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n/* const persistor = persistStore(store); */\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport contactsActions from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactSuccess(data)))\r\n    .catch(error => dispatch(contactsActions.fetchContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(contactsActions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(contactsActions.deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContact,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filterValue) => {\r\n    const normalizedFilter = filterValue.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getAllContacts,\r\n  getVisibleContacts,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport contactOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport './ContactForm.scss';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    const contactName = [];\r\n    this.props.contacts.map(contact =>\r\n      contactName.push(contact.name.toLowerCase()),\r\n    );\r\n\r\n    if (contactName.includes(name.toLowerCase())) {\r\n      return alert(`${name} is alredy in contacts`);\r\n    } else {\r\n      this.props.onSubmit(name, number);\r\n    }\r\n\r\n    this.resetInput();\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  resetInput = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className=\"add-form\" onSubmit={this.handleSubmit}>\r\n        <label className=\"add-form__label\">\r\n          Name\r\n          <input\r\n            className=\"add-form__input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n          <label className=\"add-form__label\">\r\n            Number\r\n            <input\r\n              className=\"add-form__input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className=\"add-form__btn\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsAction from '../../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className=\"find-form\">\r\n    <label className=\"find-form__label\">\r\n      Find contact by name\r\n      <input\r\n        className=\"find-form__input\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsAction.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactList.scss';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => (\r\n  <div className=\"contact\">\r\n    <ul className=\"contact__list\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className=\"contact__item\">\r\n          {name}&nbsp;{number}\r\n          <button\r\n            type=\"button\"\r\n            className=\"contact__btn\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Удалить\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => (\r\n  <div className=\"box-spinner\">\r\n    <Loader\r\n      className=\"Spiner\"\r\n      type=\"TailSpin\"\r\n      color=\"#3f51b5\"\r\n      height={40}\r\n      width={40}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactOperations from './redux/contacts/contacts-operations';\nimport contactsSelectors from './redux/contacts/contacts-selectors';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport Spinner from './components/Spinner';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContact();\n  }\n  render() {\n    return (\n      <>\n        <div className=\"section\">\n          <h1>Phonebook</h1>\n          <ContactForm />\n\n          <p>Contacts</p>\n\n          <Filter />\n\n          <ContactList />\n\n          {this.props.isLoadingContacts && <Spinner />}\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContact: () => dispatch(contactOperations.fetchContact()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n/* import { PersistGate } from 'redux-persist/integration/react'; */\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/*  </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}